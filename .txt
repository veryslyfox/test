try
{
    HttpClient client = new HttpClient();
    var message = await client.PostAsync("https://t.me/tataptah", new StringContent("Привет!"));
    Console.WriteLine(message);
}
catch (Exception exception)
{
    Console.Error.WriteLine(exception);
}
finally
{
    Console.ReadKey();
}
class HtmlSnippet
{
    HtmlSnippet(string url)
    {
        Url = url;
    }
    public static async Task<HtmlSnippet> Get(string url)
    {
        HtmlSnippet snippet = new(url);
        await snippet.Init();
        return snippet;
    }
    public string[] GetReferences()
    {
        return HtmlParser.Matches(Code).Select(m => m.Groups[1].Value).ToArray();
    }
    public string Url { get; }
    public string Code = "";
    public async Task Init()
    {
        Code = await (await Client.GetAsync(Url)).Content.ReadAsStringAsync();
    }
    static HttpClient Client = new HttpClient();
    static Regex HtmlParser = new(@"<a\s(?:[^>]*?\s|)href=""([^""]*?)""", RegexOptions.CultureInvariant);
}
class FullLayer
{
    public FullLayer(double min, double max, int inputSize, int outputSize, ActivateFunction activateFunction, bool useBias = true)
    {
        Weights = Matrix.Random(inputSize, outputSize, min, max);
        ActivateFunction = activateFunction;
        if (useBias)
        {
            Bias = Vector.Random(outputSize, min, max);
        }
    }
    public Matrix Weights;
    public Vector? Bias;

    public ActivateFunction ActivateFunction { get; }

    public Vector Forward(Vector input)
    {
        if (Bias != null)
        {
            return input * Weights + Bias;
        }
        else
        {
            return input * Weights;
        }
    }
    public Vector Backward(Vector input, Vector outputGrad, Vector[] biasGradients, Matrix[] weightsGradients, int index)
    {
        var output = Forward(input);
        biasGradients[index] = outputGrad;
        Vector result = new Vector(new double[input.Values.Length]);
        Matrix grad = Matrix.Generate(Weights.X, Weights.Y);
        for (int y = 0; y < Weights.Y; y++)
        {
            for (int x = 0; x < Weights.X; x++)
            {
                
            }
        }
        return result;
    }
}
class Bug
{

}
